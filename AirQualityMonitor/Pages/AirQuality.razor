@page "/"

@using AirQualityMonitor.Data
@inject AirQualityService airQualityService

<style>
	.slidecontainer {
		width: 100%;
	}

	.slider {
		-webkit-appearance: none;
		width: 100%;
		height: 10px;
		border-radius: 5px;
		outline: none;
		opacity: 0.7;
		-webkit-transition: .2s;
		transition: opacity .2s;
	}

	.slider_bg_pm2p5 {
		background: linear-gradient( to right, rgb(0, 176, 80) 0% 8.33%, rgb(146, 208, 80) 8.33% 16.66%, rgb(255,215,0) 16.66% 25%, rgb(255, 153, 0) 25% 33.36%, rgb(255, 0, 0) 33.36% 69.44%, rgb(192, 0, 0) 69.44% 100%);
	}

	.slider_bg_pm10 {
		background: linear-gradient( to right, rgb(0, 176, 80) 0% 8.33%, rgb(146, 208, 80) 8.33% 16.66%, rgb(255,215,0) 16.66% 41.66%, rgb(255, 153, 0) 41.66% 58.33%, rgb(255, 0, 0) 58.33% 71.66%, rgb(192, 0, 0) 71.66% 100%);
	}

    .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 5px;
        height: 25px;
        border-radius: 0%;
        background: black;
        cursor: pointer;
    }

    .slider::-moz-range-thumb {
        width: 5px;
        height: 25px;
		border-radius: 0%;
		background: black;
        cursor: pointer;
    }

	.flex-container {
		display: flex;
		flex-direction: row;
		flex-wrap: nowrap;
		justify-content: space-between;
		align-items: center;
		row-gap: 10px;
		column-gap: 20px;
	}

	.label {
		border-radius: 25px;
		padding: 0.5em 1em;
		color: black;
		font-size: 1em;
		box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
	}

	.good {
		color: rgb(0, 176, 80);
	}
	.satisfactory {
		color: rgb(146, 208, 80);
	}
	.moderate {
		color: rgb(255,215,0);
	}
	.poor {
		color: rgb(255, 153, 0);
	}
	.verypoor {
		color: rgb(255, 0, 0);
	}
	.severe {
		color: rgb(192, 0, 0);
	}

	.good_bg {
		background-color: rgb(0, 176, 80);
		color: white;
	}
	.satisfactory_bg {
		background-color: rgb(146, 208, 80);
		color: white;
	}
	.moderate_bg {
		background-color: rgb(255,215,0);
		color: white;
	}
	.poor_bg {
		background-color: rgb(255, 153, 0);
		color: white;
	}
	.verypoor_bg {
		background-color: rgb(255, 0, 0);
		color: white;
	}
	.severe_bg {
		background-color: rgb(192, 0, 0);
		color: white;
	}

	.card {
		padding: 16px 16px;
		border-radius: 15px;
		box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
		transition: 0.3s;
	}

	.card:hover {
		box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
	}

	table {
		border-collapse: collapse;
		width: 100%;
	}

	td, th {
		border: 1px solid #dddddd;
		text-align: left;
		padding: 8px;
	}
</style>

<div style="display: flex; justify-content:center;">
	<div style="max-width: 50em; padding: 1em">
		<div>
			<div style="font-size:2em; text-align:center;">Mettur AirQ Companion</div>
			<div style="font-size:1em; text-align:center;">Real-Time Air Pollution Monitor for <a style="text-decoration: none;" href="https://www.google.com/maps/place/Mettur" target="_blank">Mettur, India</a></div>
		</div>
		<br/>

		@for (int i = 0; i < airQualityViewsOutdoor?.Count; i++)
		{
			@if (i == 0)
			{
				<div style="font-size:1.5em; text-align:left;">Outdoor</div>
			}
			<div class="card" style="background: rgba(255, 255, 255, 0.9);">
				<div class="flex-container">
					<span style="width: 30%; text-align:center">
						<span style="font-size:1em; white-space: nowrap;" class="label other"><span class="oi oi-globe" aria-hidden="true"></span> @airQualityViewsOutdoor[i].Name</span>
					</span>
					<span style="width: 40%; text-align:center">
						<span style="font-size:2em; white-space: nowrap;" class="@airQualityViewsOutdoor[i].Category.Color">@airQualityViewsOutdoor[i].Value.ToString("0.00") <span style="font-size:.5em;"> @airQualityViewsOutdoor[i].Unit</span></span>
					</span>
					<span style="width: 30%; text-align:center">
						<span style="font-size:1em; white-space: nowrap;" class="label @airQualityViewsOutdoor[i].Category.BgColor">@airQualityViewsOutdoor[i].Category.Name</span>
					</span>
				</div>
				<div class="slidecontainer">
					<input type="range" min="@airQualityViewsOutdoor[i].Slider.Min" max="@airQualityViewsOutdoor[i].Slider.Max" value="@airQualityViewsOutdoor[i].Value" class="slider @airQualityViewsOutdoor[i].Slider.SliderBg" disabled>
				</div>
			</div>
			@if (i == airQualityViewsOutdoor?.Count - 1)
			{
				<div style="font-size:.7em; text-align:right; font-style:italic;">Last updated on @lastUpdatedDateOutdoor</div>
			}
			<br />
		}

		@for (int i = 0; i < airQualityViewsIndoor?.Count; i++)
		{
			@if (i == 0)
			{
				<div style="font-size:1.5em; text-align:left;">Indoor</div>
			}
			<div class="card" style="background: rgba(255, 255, 255, 0.9);">
				<div class="flex-container">
					<span style="width: 30%; text-align:center">
						<span style="font-size:1em; white-space: nowrap;" class="label other"><span class="oi oi-home" aria-hidden="true"></span> @airQualityViewsIndoor[i].Name</span>
					</span>
					<span style="width: 40%; text-align:center">
						<span style="font-size:2em; white-space: nowrap;" class="@airQualityViewsIndoor[i].Category.Color">@airQualityViewsIndoor[i].Value.ToString("0.00") <span style="font-size:.5em;"> @airQualityViewsIndoor[i].Unit</span></span>
					</span>
					<span style="width: 30%; text-align:center">
						<span style="font-size:1em; white-space: nowrap;" class="label @airQualityViewsIndoor[i].Category.BgColor">@airQualityViewsIndoor[i].Category.Name</span>
					</span>
				</div>
				<div class="slidecontainer">
					<input type="range" min="@airQualityViewsIndoor[i].Slider.Min" max="@airQualityViewsIndoor[i].Slider.Max" value="@airQualityViewsIndoor[i].Value" class="slider @airQualityViewsIndoor[i].Slider.SliderBg" disabled>
				</div>
			</div>
			@if (i == airQualityViewsIndoor?.Count - 1)
			{
				<div style="font-size:.7em; text-align:right; font-style:italic;">Last updated on @lastUpdatedDateIndoor</div>
			}
			<br />
		}

		<div class="card" style="background: rgba(255, 255, 255, 0.9);">
			<table style="font-size:1em">
				<thead>
					<tr>
						<th style="white-space: nowrap;">PM 2.5 (μg/m3)</th>
						<th style="white-space: nowrap;">PM 10 (μg/m3)</th>
						<th>Category</th>
					</tr>
				</thead>
				<tbody>
					<tr class="good">
						<td>0 - 30</td>
						<td>0 - 50</td>
						<td>Good</td>
					</tr>
					<tr class="satisfactory">
						<td>30 - 60</td>
						<td>50 - 100</td>
						<td>Satisfactory</td>
					</tr>
					<tr class="moderate">
						<td>60 - 90</td>
						<td>100 - 250</td>
						<td>Moderate</td>
					</tr>
					<tr class="poor">
						<td>90 - 120</td>
						<td>250 - 350</td>
						<td>Poor</td>
					</tr>
					<tr class="verypoor">
						<td>120 - 250</td>
						<td>350 - 430</td>
						<td>Very Poor</td>
					</tr>
					<tr class="severe">
						<td>250+</td>
						<td>430+</td>
						<td>Severe</td>
					</tr>
				</tbody>
			</table>
		</div>
		<br/>
		<div class="card" style="background: rgba(255, 255, 255, 0.9);">
			<span style="font-size:1em; font-style:italic"><b>PM 2.5 and PM 10</b> are fine and coarse particulate matter with diameters of 2.5 micrometers or smaller, and 10 micrometers or smaller, respectively.</span>
			<br/>
			<span style="font-size:1em; font-style:italic">These particles gets suspended in air through a variety of sources, both human-made (Thermal Power Plant Combustion, Traffic Emissions, etc) and natural (wildfires, arid climates, etc).</span>
			<br/>
			<span style="font-size:1em; font-weight: bold; font-style:italic">Health Risks:</span>
			<br/>
			<span style="font-size:1em; font-style:italic">PM 2.5: These ultra-fine particles can deeply penetrate the lungs and even enter the bloodstream, causing respiratory issues, aggravating asthma, and increasing the risk of heart diseases.</span>
			<br/>
			<span style="font-size:1em; font-style:italic">PM 10: Larger particles can cause irritation of the eyes, nose, and throat, and exacerbate respiratory problems, especially in sensitive individuals.</span>
		</div>
		<br/>
		<div style="color: rgb(255, 255, 255);">
			<div style="font-size:1em; font-style:italic; text-align:center;">Take charge of your environment with real-time pollution monitoring right at your fingertips.</div>
			<br/>
			<div style="font-size:1em; font-style:italic; text-align:center;">Our app empowers you to track crucial air quality indicators like PM 2.5 and PM 10, keeping you informed about the state of the air you breathe.</div>
			<br/>
			<div style="font-size:1em; font-style:italic; text-align:center;">Join us in making a difference – monitor pollution levels, raise awareness, and together, let's work towards a cleaner, healthier future for our hometown.</div>
		</div>
	</div>
</div>

@code {
	private Timer timerAirQualityDataOutdoor;
	private string lastUpdatedDateOutdoor = "00-00-0000 00:00:00 AM";
	private List<AirQualityView> airQualityViewsOutdoor = new List<AirQualityView>();

	private Timer timerAirQualityDataIndoor;
	private string lastUpdatedDateIndoor = "00-00-0000 00:00:00 AM";
	private List<AirQualityView> airQualityViewsIndoor = new List<AirQualityView>();

	#region enum and struct
	public enum PMType
	{
		PM1p0,
		PM2p5,
		PM10
	}

	public struct AirQualityView
	{
		public string Name;
		public double Value;
		public string Unit;
		public Category Category;
		public Slider Slider;
	}

	public struct Category
	{
		public string Name;
		public string Color;
		public string BgColor;
	}

	public struct Slider
	{
		public int Min;
		public int Max;
		public string SliderBg;
	}
	#endregion

	protected override void OnInitialized()
	{
		timerAirQualityDataOutdoor = new Timer(GetAirQualityData, "outdoor", TimeSpan.Zero, TimeSpan.FromMinutes(1));
		timerAirQualityDataIndoor = new Timer(GetAirQualityData, "indoor", TimeSpan.Zero, TimeSpan.FromMinutes(1));
	}

	private async void GetAirQualityData(object state)
	{
		if (state.ToString() == "outdoor")
		{
			AirQualityCollection newAirQualityCollectionOutdoor = await airQualityService.GetAirQualityDataAsync(1, "outdoor");

			if (newAirQualityCollectionOutdoor?.Documents?.Count > 0)
			{
				airQualityViewsOutdoor = GetAirQualityView(newAirQualityCollectionOutdoor);
				lastUpdatedDateOutdoor = newAirQualityCollectionOutdoor.Documents[0].Fields.CreatedDate.TimestampValue.ToLocalTime().ToString("dd-MM-yyyy hh:mm:ss tt");
			}

			await InvokeAsync(StateHasChanged);
		}
		else if (state.ToString() == "indoor")
		{
			AirQualityCollection newAirQualityCollectionIndoor = await airQualityService.GetAirQualityDataAsync(1, "indoor");

			if (newAirQualityCollectionIndoor?.Documents?.Count > 0)
			{
				airQualityViewsIndoor = GetAirQualityView(newAirQualityCollectionIndoor);
				lastUpdatedDateIndoor = newAirQualityCollectionIndoor.Documents[0].Fields.CreatedDate.TimestampValue.ToLocalTime().ToString("dd-MM-yyyy hh:mm:ss tt");
			}

			await InvokeAsync(StateHasChanged);
		}
	}

	private List<AirQualityView> GetAirQualityView(AirQualityCollection airQualityCollection)
	{
		List<AirQualityView> airQualityViews = new List<AirQualityView>();

		double particulateMatter1p0 = airQualityCollection.Documents[0].Fields.ParticulateMatter1p0 != null ? airQualityCollection.Documents[0].Fields.ParticulateMatter1p0.DoubleValue : 0;
		airQualityViews.Add(new AirQualityView()
			{
				Name = "PM 1.0",
				Value = particulateMatter1p0,
				Unit = "μg/m3",
				Category = Categorize(PMType.PM1p0, particulateMatter1p0),
				Slider = new Slider { Min = 0, Max = 360, SliderBg = "slider_bg_pm2p5" }
			});

		double particulateMatter2p5 = airQualityCollection.Documents[0].Fields.ParticulateMatter2p5 != null ? airQualityCollection.Documents[0].Fields.ParticulateMatter2p5.DoubleValue : 0;
		airQualityViews.Add(new AirQualityView()
			{
				Name = "PM 2.5",
				Value = particulateMatter2p5,
				Unit = "μg/m3",
				Category = Categorize(PMType.PM2p5, particulateMatter2p5),
				Slider = new Slider { Min = 0, Max = 360, SliderBg = "slider_bg_pm2p5" }
			});

		double particulateMatter10 = airQualityCollection.Documents[0].Fields.ParticulateMatter10 != null ? airQualityCollection.Documents[0].Fields.ParticulateMatter10.DoubleValue : 0;
		airQualityViews.Add(new AirQualityView()
			{
				Name = "PM 10",
				Value = particulateMatter10,
				Unit = "μg/m3",
				Category = Categorize(PMType.PM10, particulateMatter10),
				Slider = new Slider { Min = 0, Max = 600, SliderBg = "slider_bg_pm10" }
			});

		return airQualityViews;
	}

	private Category Categorize(PMType pmType, double pmValue)
	{
		Category category;

		if (((pmType == PMType.PM1p0 || pmType == PMType.PM2p5) && pmValue < 30) || (pmType == PMType.PM10 && pmValue < 50))
		{
			category = new Category { Name = "Good", Color = "good", BgColor = "good_bg" };
		}
		else if (((pmType == PMType.PM1p0 || pmType == PMType.PM2p5) && pmValue < 60) || (pmType == PMType.PM10 && pmValue < 100))
		{
			category = new Category { Name = "Satisfactory", Color = "satisfactory", BgColor = "satisfactory_bg" };
		}
		else if (((pmType == PMType.PM1p0 || pmType == PMType.PM2p5) && pmValue < 90) || (pmType == PMType.PM10 && pmValue < 250))
		{
			category = new Category { Name = "Moderate", Color = "moderate", BgColor = "moderate_bg" };
		}
		else if (((pmType == PMType.PM1p0 || pmType == PMType.PM2p5) && pmValue < 120) || (pmType == PMType.PM10 && pmValue < 350))
		{
			category = new Category { Name = "Poor", Color = "poor", BgColor = "poor_bg" };
		}
		else if (((pmType == PMType.PM1p0 || pmType == PMType.PM2p5) && pmValue < 250) || (pmType == PMType.PM10 && pmValue < 430))
		{
			category = new Category { Name = "Very Poor", Color = "verypoor", BgColor = "verypoor_bg" };
		}
		else
		{
			category = new Category { Name = "Severe", Color = "severe", BgColor = "severe_bg" };
		}

		return category;
	}
}

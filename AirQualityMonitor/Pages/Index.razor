@page "/"

@using AirQualityMonitor.Data
@inject AirQualityService airQualityService

<h1>Air Quality Monitor</h1>

<p>Real-Time Air Quality Monitoring for the Community</p>

@if (airQualityCollection?.Documents == null || airQualityCollection?.Documents?.Count == 0)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Date Time</th>
				<th>Temp°C</th>
				<th>Temp°F</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@for (int i = 0; i < airQualityCollection?.Documents?.Count; i++)
			{
				<tr class="@(i < receivedNewDocuments ? newRecordAnimation : "")">
					<td>@airQualityCollection?.Documents[i]?.Fields?.CreatedDate?.TimestampValue.ToLocalTime().ToString("MM-dd-yyyy hh:mm tt")</td>
					<td>@airQualityCollection?.Documents[i]?.Fields?.Temperature?.Celsius</td>
					<td>@airQualityCollection?.Documents[i]?.Fields?.Temperature?.Fahrenheit</td>
					<td>@airQualityCollection?.Documents[i]?.Fields?.Temperature?.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private AirQualityCollection airQualityCollection;
	private Timer timerAirQualityData;
	private int collectionSize = 15;
	private int newDocumentsSize = 1;
	private int missedDocuments = 0;
	private int receivedNewDocuments = 0;
	private string newRecordAnimation = "new-record-animation";

	protected override void OnInitialized()
	{
		airQualityCollection = new AirQualityCollection { Documents = new List<AirQualityDocument>() };
		timerAirQualityData = new Timer(GetAirQualityData, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
	}

	private async void GetAirQualityData(object state)
	{
		int lastCollectionSize = airQualityCollection.Documents.Count;

		int pageSize = airQualityCollection?.Documents?.Count > 0 ? newDocumentsSize + missedDocuments : collectionSize;
		AirQualityCollection newAirQualityCollection = await airQualityService.GetAirQualityDataAsync(pageSize);

		if (newAirQualityCollection?.Documents?.Count > 0)
		{
			airQualityCollection.Documents.InsertRange(0, newAirQualityCollection?.Documents);
			airQualityCollection.Documents = airQualityCollection.Documents.DistinctBy(x => x.DocumentId).ToList();

			int pruneCount = airQualityCollection.Documents.Count - collectionSize;

			if (pruneCount > 0)
			{
				airQualityCollection.Documents.RemoveRange(collectionSize, pruneCount);
			}

			missedDocuments = 0;
			receivedNewDocuments = (airQualityCollection.Documents.Count + pruneCount) - lastCollectionSize;

			//Css will be applied only when the element is created and reapplied only when a property gets changed.
			//So removing the animation class and adding it back to replay the animation for the existing elements.
			newRecordAnimation = "";
			await InvokeAsync(StateHasChanged);
			newRecordAnimation = "new-record-animation";
			await InvokeAsync(StateHasChanged);
		}
		else
		{
			missedDocuments += newDocumentsSize;
			missedDocuments = (newDocumentsSize + missedDocuments) > collectionSize ? (collectionSize - newDocumentsSize) : missedDocuments;
		}
	}
}

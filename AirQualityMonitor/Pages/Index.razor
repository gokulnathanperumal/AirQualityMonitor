@page "/"

@using AirQualityMonitor.Data
@inject AirQualityService airQualityService

<h1>Air Quality Monitor</h1>

<p>Real-Time Air Quality Monitoring for the Community</p>

@if (airQualityCollection?.Documents == null || airQualityCollection?.Documents?.Count == 0)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Date Time</th>
				<th>Temp°C</th>
				<th>Temp°F</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (AirQualityDocument airQualityDocument in airQualityCollection?.Documents)
			{
				<tr>
					<td>@airQualityDocument?.Fields?.CreatedDate?.TimestampValue.ToLocalTime().ToString("MM-dd-yyyy hh:mm tt")</td>
					<td>@airQualityDocument?.Fields?.Temperature?.Celsius</td>
					<td>@airQualityDocument?.Fields?.Temperature?.Fahrenheit</td>
					<td>@airQualityDocument?.Fields?.Temperature?.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private AirQualityCollection airQualityCollection;
	private int collectionSize = 15;
	private int newDocumentsSize = 1;
	private Timer timerAirQualityData;

	protected override async Task OnInitializedAsync()
	{
		airQualityCollection = await airQualityService.GetAirQualityDataAsync(collectionSize);
		timerAirQualityData = new Timer(GetAirQualityData, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
	}

	private async void GetAirQualityData(object state)
	{
		AirQualityCollection airQualityCollectionNew = await airQualityService.GetAirQualityDataAsync(newDocumentsSize);

		if (airQualityCollectionNew?.Documents?.Count > 0)
		{
			airQualityCollection.Documents.InsertRange(0, airQualityCollectionNew?.Documents);
			airQualityCollection.Documents = airQualityCollection.Documents.DistinctBy(x => x.DocumentId).ToList();

			int pruneCount = airQualityCollection.Documents.Count - collectionSize;

			if (pruneCount > 0)
			{
				airQualityCollection.Documents.RemoveRange(collectionSize, pruneCount);
			}

			await InvokeAsync(StateHasChanged);
		}
	}
}
